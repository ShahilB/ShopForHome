// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopForHome.API.Data;

#nullable disable

namespace ShopForHome.API.Migrations
{
    [DbContext(typeof(ShopForHomeDbContext))]
    partial class ShopForHomeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShopForHome.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Home furniture including sofas, chairs, tables, and storage solutions",
                            ImageUrl = "/assets/images/categories/furniture.jpg",
                            IsActive = true,
                            Name = "Furniture",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Decorative items to beautify your home including wall art, vases, and ornaments",
                            ImageUrl = "/assets/images/categories/home-decor.jpg",
                            IsActive = true,
                            Name = "Home Décor",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Indoor and outdoor lighting solutions including lamps, chandeliers, and LED lights",
                            ImageUrl = "/assets/images/categories/lighting.jpg",
                            IsActive = true,
                            Name = "Lighting",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kitchen appliances, cookware, and dining accessories",
                            ImageUrl = "/assets/images/categories/kitchen-dining.jpg",
                            IsActive = true,
                            Name = "Kitchen & Dining",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bedroom furniture and accessories including beds, mattresses, and bedding",
                            ImageUrl = "/assets/images/categories/bedroom.jpg",
                            IsActive = true,
                            Name = "Bedroom",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bathroom fixtures, accessories, and storage solutions",
                            ImageUrl = "/assets/images/categories/bathroom.jpg",
                            IsActive = true,
                            Name = "Bathroom",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ShopForHome.API.Models.DiscountCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MinOrderAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ValidFrom", "ValidTo");

                    b.ToTable("DiscountCoupons");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopForHome.API.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MinStockLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ReviewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsFeatured");

                    b.HasIndex("Price");

                    b.HasIndex("Rating");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "ComfortLiving",
                            CategoryId = 1,
                            Color = "Gray",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Comfortable 3-piece sectional sofa with premium fabric upholstery",
                            Dimensions = "120x80x35 inches",
                            DiscountPrice = 999.99m,
                            ImageUrl = "/assets/images/products/sofa-sectional.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Fabric",
                            MinStockLevel = 10,
                            Name = "Modern Sectional Sofa",
                            Price = 1299.99m,
                            Rating = 4.5m,
                            ReviewCount = 23,
                            SKU = "SOFA-001",
                            Stock = 15,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 85.5m
                        },
                        new
                        {
                            Id = 2,
                            Brand = "WoodCraft",
                            CategoryId = 1,
                            Color = "Natural Oak",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Solid oak dining table seats 6 people comfortably",
                            Dimensions = "72x36x30 inches",
                            ImageUrl = "/assets/images/products/dining-table.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Solid Oak",
                            MinStockLevel = 10,
                            Name = "Oak Dining Table",
                            Price = 899.99m,
                            Rating = 4.8m,
                            ReviewCount = 15,
                            SKU = "TABLE-001",
                            Stock = 8,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 65.0m
                        },
                        new
                        {
                            Id = 3,
                            Brand = "ErgoMax",
                            CategoryId = 1,
                            Color = "Black",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High-back ergonomic office chair with lumbar support",
                            Dimensions = "26x26x45 inches",
                            DiscountPrice = 279.99m,
                            ImageUrl = "/assets/images/products/office-chair.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Mesh",
                            MinStockLevel = 10,
                            Name = "Ergonomic Office Chair",
                            Price = 349.99m,
                            Rating = 4.3m,
                            ReviewCount = 41,
                            SKU = "CHAIR-001",
                            Stock = 25,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 22.0m
                        },
                        new
                        {
                            Id = 4,
                            Brand = "ArtisticVisions",
                            CategoryId = 2,
                            Color = "Multicolor",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Modern abstract canvas painting perfect for living room",
                            Dimensions = "24x36 inches",
                            ImageUrl = "/assets/images/products/wall-art.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Canvas",
                            MinStockLevel = 10,
                            Name = "Abstract Canvas Wall Art",
                            Price = 129.99m,
                            Rating = 4.2m,
                            ReviewCount = 18,
                            SKU = "ART-001",
                            Stock = 30,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 2.5m
                        },
                        new
                        {
                            Id = 5,
                            Brand = "CeramicCraft",
                            CategoryId = 2,
                            Color = "White",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Handcrafted ceramic vase with elegant design",
                            Dimensions = "8x8x12 inches",
                            DiscountPrice = 59.99m,
                            ImageUrl = "/assets/images/products/ceramic-vase.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Ceramic",
                            MinStockLevel = 10,
                            Name = "Ceramic Decorative Vase",
                            Price = 79.99m,
                            Rating = 4.6m,
                            ReviewCount = 12,
                            SKU = "VASE-001",
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 3.2m
                        },
                        new
                        {
                            Id = 6,
                            Brand = "CozyHome",
                            CategoryId = 2,
                            Color = "Blue",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Set of 4 decorative throw pillows with removable covers",
                            Dimensions = "18x18 inches",
                            ImageUrl = "/assets/images/products/throw-pillows.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Cotton",
                            MinStockLevel = 10,
                            Name = "Throw Pillow Set",
                            Price = 49.99m,
                            Rating = 4.4m,
                            ReviewCount = 35,
                            SKU = "PILLOW-001",
                            Stock = 50,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 1.8m
                        },
                        new
                        {
                            Id = 7,
                            Brand = "LuxuryLights",
                            CategoryId = 3,
                            Color = "Crystal",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Elegant crystal chandelier with LED bulbs",
                            Dimensions = "24x24x30 inches",
                            DiscountPrice = 449.99m,
                            ImageUrl = "/assets/images/products/chandelier.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Crystal & Metal",
                            MinStockLevel = 10,
                            Name = "Crystal Chandelier",
                            Price = 599.99m,
                            Rating = 4.9m,
                            ReviewCount = 8,
                            SKU = "LIGHT-001",
                            Stock = 5,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 15.5m
                        },
                        new
                        {
                            Id = 8,
                            Brand = "ModernLights",
                            CategoryId = 3,
                            Color = "Black",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Minimalist table lamp with adjustable brightness",
                            Dimensions = "8x8x18 inches",
                            ImageUrl = "/assets/images/products/table-lamp.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Metal",
                            MinStockLevel = 10,
                            Name = "Modern Table Lamp",
                            Price = 89.99m,
                            Rating = 4.1m,
                            ReviewCount = 27,
                            SKU = "LAMP-001",
                            Stock = 35,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 4.2m
                        },
                        new
                        {
                            Id = 9,
                            Brand = "SmartHome",
                            CategoryId = 3,
                            Color = "White",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Smart LED floor lamp with remote control",
                            Dimensions = "12x12x60 inches",
                            DiscountPrice = 159.99m,
                            ImageUrl = "/assets/images/products/floor-lamp.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Metal & Plastic",
                            MinStockLevel = 10,
                            Name = "LED Floor Lamp",
                            Price = 199.99m,
                            Rating = 4.7m,
                            ReviewCount = 22,
                            SKU = "LAMP-002",
                            Stock = 18,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 8.5m
                        },
                        new
                        {
                            Id = 10,
                            Brand = "ChefMaster",
                            CategoryId = 4,
                            Color = "Stainless Steel",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Professional 12-piece stainless steel cookware set",
                            Dimensions = "Various sizes",
                            DiscountPrice = 229.99m,
                            ImageUrl = "/assets/images/products/cookware-set.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Stainless Steel",
                            MinStockLevel = 10,
                            Name = "Stainless Steel Cookware Set",
                            Price = 299.99m,
                            Rating = 4.6m,
                            ReviewCount = 31,
                            SKU = "COOK-001",
                            Stock = 12,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 18.0m
                        },
                        new
                        {
                            Id = 11,
                            Brand = "BambooKitchen",
                            CategoryId = 4,
                            Color = "Natural",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Large bamboo cutting board with juice groove",
                            Dimensions = "18x12x1 inches",
                            ImageUrl = "/assets/images/products/cutting-board.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Bamboo",
                            MinStockLevel = 10,
                            Name = "Wooden Cutting Board",
                            Price = 39.99m,
                            Rating = 4.3m,
                            ReviewCount = 19,
                            SKU = "BOARD-001",
                            Stock = 45,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 2.8m
                        },
                        new
                        {
                            Id = 12,
                            Brand = "SleepWell",
                            CategoryId = 5,
                            Color = "White",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Queen size memory foam mattress with cooling gel",
                            Dimensions = "60x80x12 inches",
                            DiscountPrice = 599.99m,
                            ImageUrl = "/assets/images/products/mattress.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Memory Foam",
                            MinStockLevel = 10,
                            Name = "Memory Foam Mattress",
                            Price = 799.99m,
                            Rating = 4.7m,
                            ReviewCount = 45,
                            SKU = "MATT-001",
                            Stock = 10,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 55.0m
                        },
                        new
                        {
                            Id = 13,
                            Brand = "ModernBedroom",
                            CategoryId = 5,
                            Color = "Walnut",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Modern nightstand with 2 drawers and USB charging",
                            Dimensions = "18x16x24 inches",
                            ImageUrl = "/assets/images/products/nightstand.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Wood",
                            MinStockLevel = 10,
                            Name = "Bedside Nightstand",
                            Price = 149.99m,
                            Rating = 4.4m,
                            ReviewCount = 16,
                            SKU = "NIGHT-001",
                            Stock = 22,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 25.0m
                        },
                        new
                        {
                            Id = 14,
                            Brand = "AquaLux",
                            CategoryId = 6,
                            Color = "Chrome",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Large rainfall shower head with multiple spray settings",
                            Dimensions = "8x8x4 inches",
                            DiscountPrice = 119.99m,
                            ImageUrl = "/assets/images/products/shower-head.jpg",
                            IsActive = true,
                            IsFeatured = false,
                            Material = "Stainless Steel",
                            MinStockLevel = 10,
                            Name = "Rainfall Shower Head",
                            Price = 159.99m,
                            Rating = 4.5m,
                            ReviewCount = 33,
                            SKU = "SHOWER-001",
                            Stock = 28,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 3.5m
                        },
                        new
                        {
                            Id = 15,
                            Brand = "BambooLux",
                            CategoryId = 6,
                            Color = "Beige",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Luxury bamboo bath towel set - ultra soft and absorbent",
                            Dimensions = "Various sizes",
                            ImageUrl = "/assets/images/products/towel-set.jpg",
                            IsActive = true,
                            IsFeatured = true,
                            Material = "Bamboo Fiber",
                            MinStockLevel = 10,
                            Name = "Bamboo Bath Towel Set",
                            Price = 89.99m,
                            Rating = 4.8m,
                            ReviewCount = 28,
                            SKU = "TOWEL-001",
                            Stock = 40,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Weight = 2.2m
                        });
                });

            modelBuilder.Entity("ShopForHome.API.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ShopForHome.API.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProductId", "UserId")
                        .IsUnique();

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("ShopForHome.API.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("ShopForHome.API.Models.StockNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockNotifications");
                });

            modelBuilder.Entity("ShopForHome.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("User");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Admin Street",
                            City = "Admin City",
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@shopforhome.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q5Q==",
                            PhoneNumber = "+1234567890",
                            Role = "Admin",
                            State = "Admin State",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ShopForHome.API.Models.UserCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CouponId")
                        .IsUnique();

                    b.ToTable("UserCoupons");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Order", b =>
                {
                    b.HasOne("ShopForHome.API.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopForHome.API.Models.OrderItem", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Product", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopForHome.API.Models.ProductImage", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopForHome.API.Models.ProductReview", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopForHome.API.Models.User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopForHome.API.Models.ShoppingCart", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopForHome.API.Models.User", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopForHome.API.Models.StockNotification", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("StockNotifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopForHome.API.Models.UserCoupon", b =>
                {
                    b.HasOne("ShopForHome.API.Models.DiscountCoupon", "DiscountCoupon")
                        .WithMany("UserCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopForHome.API.Models.User", "User")
                        .WithMany("UserCoupons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountCoupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Wishlist", b =>
                {
                    b.HasOne("ShopForHome.API.Models.Product", "Product")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopForHome.API.Models.User", "User")
                        .WithMany("WishlistItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopForHome.API.Models.DiscountCoupon", b =>
                {
                    b.Navigation("UserCoupons");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopForHome.API.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("StockNotifications");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("ShopForHome.API.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("UserCoupons");

                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
